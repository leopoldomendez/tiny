
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Apr 19 01:18:14 VET 2015
//----------------------------------------------------

package compilador;

import java_cup.runtime.*;
import ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Apr 19 01:18:14 VET 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\074\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\003\002\000\002\004\010" +
    "\000\002\005\005\000\002\005\003\000\002\005\002\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\004\000\002\006\004" +
    "\000\002\006\004\000\002\006\003\000\002\007\006\000" +
    "\002\007\010\000\002\010\010\000\002\011\005\000\002" +
    "\012\006\000\002\012\004\000\002\012\002\000\002\013" +
    "\005\000\002\013\003\000\002\013\002\000\002\014\014" +
    "\000\002\015\007\000\002\015\011\000\002\016\006\000" +
    "\002\017\005\000\002\020\004\000\002\021\004\000\002" +
    "\022\005\000\002\022\005\000\002\022\003\000\002\023" +
    "\005\000\002\023\005\000\002\023\003\000\002\024\005" +
    "\000\002\024\005\000\002\024\005\000\002\024\005\000" +
    "\002\024\003\000\002\025\005\000\002\025\005\000\002" +
    "\025\003\000\002\026\005\000\002\026\005\000\002\026" +
    "\003\000\002\027\005\000\002\027\003\000\002\027\003" +
    "\000\002\027\006\000\002\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\172\000\004\007\ufffd\001\002\000\004\007\ufffe\001" +
    "\002\000\004\007\022\001\002\000\004\002\172\001\002" +
    "\000\004\015\010\001\002\000\004\031\011\001\002\000" +
    "\010\032\uffe6\042\uffe6\046\013\001\002\000\006\032\015" +
    "\042\016\001\002\000\004\015\014\001\002\000\006\032" +
    "\uffe7\042\uffe7\001\002\000\004\007\022\001\002\000\004" +
    "\046\017\001\002\000\004\015\020\001\002\000\006\032" +
    "\uffe8\042\uffe8\001\002\000\004\007\ufffc\001\002\000\026" +
    "\003\035\004\030\010\ufff9\011\043\013\024\014\031\015" +
    "\032\035\ufff9\036\041\045\027\001\002\000\012\006\ufff7" +
    "\010\ufff7\012\ufff7\035\ufff7\001\002\000\004\015\171\001" +
    "\002\000\004\015\161\001\002\000\012\006\ufff5\010\ufff5" +
    "\012\ufff5\035\ufff5\001\002\000\016\003\057\015\056\016" +
    "\051\031\062\043\156\044\157\001\002\000\012\003\057" +
    "\015\056\016\051\031\062\001\002\000\012\003\057\015" +
    "\056\016\051\031\062\001\002\000\010\017\133\020\136" +
    "\031\137\001\002\000\012\006\ufff2\010\ufff2\012\ufff2\035" +
    "\ufff2\001\002\000\006\010\135\035\047\001\002\000\012" +
    "\006\uffed\010\uffed\012\uffed\035\uffed\001\002\000\012\006" +
    "\ufff8\010\ufff8\012\ufff8\035\ufff8\001\002\000\012\006\ufff3" +
    "\010\ufff3\012\ufff3\035\ufff3\001\002\000\012\006\ufff4\010" +
    "\ufff4\012\ufff4\035\ufff4\001\002\000\004\031\121\001\002" +
    "\000\012\006\ufff1\010\ufff1\012\ufff1\035\ufff1\001\002\000" +
    "\026\003\035\004\030\011\043\012\ufff9\013\024\014\031" +
    "\015\032\035\ufff9\036\041\045\027\001\002\000\012\006" +
    "\ufff6\010\ufff6\012\ufff6\035\ufff6\001\002\000\012\006\ufffa" +
    "\010\ufffa\012\ufffa\035\ufffa\001\002\000\006\012\050\035" +
    "\047\001\002\000\022\003\035\004\030\011\043\013\024" +
    "\014\031\015\032\036\041\045\027\001\002\000\012\003" +
    "\057\015\056\016\051\031\062\001\002\000\052\005\uffc9" +
    "\006\uffc9\010\uffc9\012\uffc9\020\uffc9\021\uffc9\022\uffc9\023" +
    "\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9\032\uffc9" +
    "\034\uffc9\035\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\001" +
    "\002\000\052\005\uffce\006\uffce\010\uffce\012\uffce\020\uffce" +
    "\021\uffce\022\uffce\023\uffce\024\uffce\025\uffce\026\uffce\027" +
    "\075\030\074\032\uffce\034\uffce\035\uffce\037\uffce\040\uffce" +
    "\041\uffce\042\uffce\001\002\000\026\005\uffd6\006\uffd6\010" +
    "\uffd6\012\uffd6\020\uffd6\032\uffd6\035\uffd6\037\uffd6\040\uffd6" +
    "\041\uffd6\001\002\000\016\006\uffdf\010\uffdf\012\uffdf\035" +
    "\uffdf\040\114\041\115\001\002\000\024\006\uffd9\010\uffd9" +
    "\012\uffd9\020\110\032\uffd9\035\uffd9\037\111\040\uffd9\041" +
    "\uffd9\001\002\000\054\005\uffc8\006\uffc8\010\uffc8\012\uffc8" +
    "\020\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026" +
    "\uffc8\027\uffc8\030\uffc8\032\uffc8\033\105\034\uffc8\035\uffc8" +
    "\037\uffc8\040\uffc8\041\uffc8\042\uffc8\001\002\000\052\005" +
    "\uffc6\006\uffc6\010\uffc6\012\uffc6\020\uffc6\021\uffc6\022\uffc6" +
    "\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\032" +
    "\uffc6\034\uffc6\035\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6" +
    "\001\002\000\052\005\uffcb\006\uffcb\010\uffcb\012\uffcb\020" +
    "\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb" +
    "\027\uffcb\030\uffcb\032\uffcb\034\uffcb\035\uffcb\037\uffcb\040" +
    "\uffcb\041\uffcb\042\uffcb\001\002\000\044\005\uffd1\006\uffd1" +
    "\010\uffd1\012\uffd1\020\uffd1\021\067\022\070\023\065\024" +
    "\066\025\071\026\072\032\uffd1\035\uffd1\037\uffd1\040\uffd1" +
    "\041\uffd1\042\uffd1\001\002\000\012\003\057\015\056\016" +
    "\051\031\062\001\002\000\004\032\064\001\002\000\052" +
    "\005\uffca\006\uffca\010\uffca\012\uffca\020\uffca\021\uffca\022" +
    "\uffca\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca" +
    "\032\uffca\034\uffca\035\uffca\037\uffca\040\uffca\041\uffca\042" +
    "\uffca\001\002\000\012\003\057\015\056\016\051\031\062" +
    "\001\002\000\012\003\057\015\056\016\051\031\062\001" +
    "\002\000\012\003\057\015\056\016\051\031\062\001\002" +
    "\000\012\003\057\015\056\016\051\031\062\001\002\000" +
    "\012\003\057\015\056\016\051\031\062\001\002\000\012" +
    "\003\057\015\056\016\051\031\062\001\002\000\052\005" +
    "\uffcf\006\uffcf\010\uffcf\012\uffcf\020\uffcf\021\uffcf\022\uffcf" +
    "\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\075\030\074\032" +
    "\uffcf\034\uffcf\035\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf" +
    "\001\002\000\012\003\057\015\056\016\051\031\062\001" +
    "\002\000\012\003\057\015\056\016\051\031\062\001\002" +
    "\000\052\005\uffcd\006\uffcd\010\uffcd\012\uffcd\020\uffcd\021" +
    "\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd" +
    "\030\uffcd\032\uffcd\034\uffcd\035\uffcd\037\uffcd\040\uffcd\041" +
    "\uffcd\042\uffcd\001\002\000\052\005\uffcc\006\uffcc\010\uffcc" +
    "\012\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025" +
    "\uffcc\026\uffcc\027\uffcc\030\uffcc\032\uffcc\034\uffcc\035\uffcc" +
    "\037\uffcc\040\uffcc\041\uffcc\042\uffcc\001\002\000\052\005" +
    "\uffd0\006\uffd0\010\uffd0\012\uffd0\020\uffd0\021\uffd0\022\uffd0" +
    "\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\075\030\074\032" +
    "\uffd0\034\uffd0\035\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0" +
    "\001\002\000\034\005\uffd4\006\uffd4\010\uffd4\012\uffd4\020" +
    "\uffd4\025\071\026\072\032\uffd4\035\uffd4\037\uffd4\040\uffd4" +
    "\041\uffd4\042\uffd4\001\002\000\034\005\uffd5\006\uffd5\010" +
    "\uffd5\012\uffd5\020\uffd5\025\071\026\072\032\uffd5\035\uffd5" +
    "\037\uffd5\040\uffd5\041\uffd5\042\uffd5\001\002\000\034\005" +
    "\uffd3\006\uffd3\010\uffd3\012\uffd3\020\uffd3\025\071\026\072" +
    "\032\uffd3\035\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3\001" +
    "\002\000\034\005\uffd2\006\uffd2\010\uffd2\012\uffd2\020\uffd2" +
    "\025\071\026\072\032\uffd2\035\uffd2\037\uffd2\040\uffd2\041" +
    "\uffd2\042\uffd2\001\002\000\012\003\057\015\056\016\051" +
    "\031\062\001\002\000\010\025\071\026\072\034\107\001" +
    "\002\000\052\005\uffc7\006\uffc7\010\uffc7\012\uffc7\020\uffc7" +
    "\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7\027" +
    "\uffc7\030\uffc7\032\uffc7\034\uffc7\035\uffc7\037\uffc7\040\uffc7" +
    "\041\uffc7\042\uffc7\001\002\000\012\003\057\015\056\016" +
    "\051\031\062\001\002\000\012\003\057\015\056\016\051" +
    "\031\062\001\002\000\026\005\uffd7\006\uffd7\010\uffd7\012" +
    "\uffd7\020\uffd7\032\uffd7\035\uffd7\037\uffd7\040\uffd7\041\uffd7" +
    "\001\002\000\026\005\uffd8\006\uffd8\010\uffd8\012\uffd8\020" +
    "\uffd8\032\uffd8\035\uffd8\037\uffd8\040\uffd8\041\uffd8\001\002" +
    "\000\012\003\057\015\056\016\051\031\062\001\002\000" +
    "\012\003\057\015\056\016\051\031\062\001\002\000\024" +
    "\006\uffdb\010\uffdb\012\uffdb\020\110\032\uffdb\035\uffdb\037" +
    "\111\040\uffdb\041\uffdb\001\002\000\024\006\uffda\010\uffda" +
    "\012\uffda\020\110\032\uffda\035\uffda\037\111\040\uffda\041" +
    "\uffda\001\002\000\012\006\ufffb\010\ufffb\012\ufffb\035\ufffb" +
    "\001\002\000\004\015\122\001\002\000\004\017\133\001" +
    "\002\000\004\035\124\001\002\000\012\003\057\015\056" +
    "\016\051\031\062\001\002\000\004\035\126\001\002\000" +
    "\004\015\122\001\002\000\004\032\130\001\002\000\026" +
    "\003\035\004\030\010\ufff9\011\043\013\024\014\031\015" +
    "\032\035\ufff9\036\041\045\027\001\002\000\006\010\132" +
    "\035\047\001\002\000\012\006\uffe2\010\uffe2\012\uffe2\035" +
    "\uffe2\001\002\000\012\003\057\015\056\016\051\031\062" +
    "\001\002\000\020\006\uffde\010\uffde\012\uffde\032\uffde\035" +
    "\uffde\040\114\041\115\001\002\000\016\002\uffe9\006\uffe9" +
    "\007\uffe9\010\uffe9\012\uffe9\035\uffe9\001\002\000\004\015" +
    "\142\001\002\000\010\032\uffe6\042\uffe6\046\013\001\002" +
    "\000\006\032\141\042\016\001\002\000\012\006\uffec\010" +
    "\uffec\012\uffec\035\uffec\001\002\000\004\031\143\001\002" +
    "\000\010\032\uffe6\042\uffe6\046\013\001\002\000\006\032" +
    "\145\042\016\001\002\000\012\006\uffeb\010\uffeb\012\uffeb" +
    "\035\uffeb\001\002\000\016\006\uffdc\010\uffdc\012\uffdc\035" +
    "\uffdc\040\114\041\115\001\002\000\010\005\150\020\110" +
    "\037\111\001\002\000\030\003\035\004\030\006\ufff9\010" +
    "\ufff9\011\043\013\024\014\031\015\032\035\ufff9\036\041" +
    "\045\027\001\002\000\010\006\152\010\153\035\047\001" +
    "\002\000\026\003\035\004\030\010\ufff9\011\043\013\024" +
    "\014\031\015\032\035\ufff9\036\041\045\027\001\002\000" +
    "\012\006\uffe1\010\uffe1\012\uffe1\035\uffe1\001\002\000\006" +
    "\010\155\035\047\001\002\000\012\006\uffe0\010\uffe0\012" +
    "\uffe0\035\uffe0\001\002\000\012\006\uffef\010\uffef\012\uffef" +
    "\035\uffef\001\002\000\012\006\uffee\010\uffee\012\uffee\035" +
    "\uffee\001\002\000\016\006\ufff0\010\ufff0\012\ufff0\025\071" +
    "\026\072\035\ufff0\001\002\000\004\031\162\001\002\000" +
    "\016\003\057\015\056\016\051\031\062\032\uffe3\042\uffe3" +
    "\001\002\000\006\032\uffe4\042\uffe4\001\002\000\006\032" +
    "\165\042\166\001\002\000\004\007\022\001\002\000\012" +
    "\003\057\015\056\016\051\031\062\001\002\000\006\032" +
    "\uffe5\042\uffe5\001\002\000\012\006\uffea\010\uffea\012\uffea" +
    "\035\uffea\001\002\000\012\006\uffdd\010\uffdd\012\uffdd\035" +
    "\uffdd\001\002\000\004\002\000\001\002\000\004\002\001" +
    "\001\002\000\004\007\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\172\000\012\002\005\003\004\004\003\030\006\001" +
    "\001\000\002\001\001\000\010\004\173\011\172\030\006" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\005\033\006\044\007\041\010\032\014" +
    "\036\015\035\016\022\017\043\020\025\021\037\030\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\025\157\026\051\027\057" +
    "\001\001\000\014\023\146\024\052\025\060\026\051\027" +
    "\057\001\001\000\016\022\145\023\054\024\052\025\060" +
    "\026\051\027\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\005\045\006\044\007\041\010\032" +
    "\014\036\015\035\016\022\017\043\020\025\021\037\030" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\006\117\007\041\010\032\014\036\015" +
    "\035\016\022\017\043\020\025\021\037\030\024\001\001" +
    "\000\016\022\053\023\054\024\052\025\060\026\051\027" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\024\062\025\060\026\051\027\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\025\103\026\051" +
    "\027\057\001\001\000\010\025\102\026\051\027\057\001" +
    "\001\000\010\025\101\026\051\027\057\001\001\000\010" +
    "\025\100\026\051\027\057\001\001\000\006\026\077\027" +
    "\057\001\001\000\006\026\072\027\057\001\001\000\002" +
    "\001\001\000\004\027\076\001\001\000\004\027\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\025\105\026\051\027\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\024\112\025" +
    "\060\026\051\027\057\001\001\000\012\024\111\025\060" +
    "\026\051\027\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\023\116\024\052\025\060\026\051\027\057" +
    "\001\001\000\014\023\115\024\052\025\060\026\051\027" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\122\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\024\124\025\060\026\051\027\057" +
    "\001\001\000\002\001\001\000\004\017\126\001\001\000" +
    "\002\001\001\000\030\005\130\006\044\007\041\010\032" +
    "\014\036\015\035\016\022\017\043\020\025\021\037\030" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\022\133\023\054\024\052\025\060\026\051\027\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\137\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\143\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\005\150\006\044\007\041\010\032\014\036" +
    "\015\035\016\022\017\043\020\025\021\037\030\024\001" +
    "\001\000\002\001\001\000\030\005\153\006\044\007\041" +
    "\010\032\014\036\015\035\016\022\017\043\020\025\021" +
    "\037\030\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\013\163\024\162" +
    "\025\060\026\051\027\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\167\001\001\000\012\024\166" +
    "\025\060\026\051\027\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	private boolean modoDepuracion=false;
	private NodoBase ast=null;
	private int lineanum=0;
	
	//Debe ser llamada solo despues de un parse(), en caso contrario retornara null siempre;
	public NodoBase getASTroot(){
		return ast;
	}

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // factor ::= error 
            {
              NodoBase RESULT =null;
		
			RESULT = null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // factor ::= ID LCORCHETE simple_exp RCORCHETE 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase e = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			RESULT = new NodoVector(variable,e);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // factor ::= ID 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			if(variable!=null)
			{
				RESULT= new NodoIdentificador(variable.toString());			
			}else
			{
				RESULT = null;		
			}	
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // factor ::= NUM 
            {
              NodoBase RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer valor = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			if(valor!=null)
			{
				RESULT = new NodoValor(valor);			
			}else
			{
				RESULT = null;		
			}	
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // factor ::= LPAREN exp RPAREN 
            {
              NodoBase RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase e = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			RESULT = e;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // term ::= factor 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = ex;		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // term ::= term OVER factor 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = new NodoOperacion(exI,tipoOp.entre,exD);		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // term ::= term TIMES factor 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = new NodoOperacion(exI,tipoOp.por,exD);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // simple_exp ::= term 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = ex;		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // simple_exp ::= simple_exp MINUS term 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = new NodoOperacion(exI,tipoOp.menos,exD);		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // simple_exp ::= simple_exp PLUS term 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = new NodoOperacion(exI,tipoOp.mas,exD);		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= simple_exp 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = ex;		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= simple_exp MAYORIGUAL simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = new NodoOperacion(exI,tipoOp.mayorigual,exD);		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= simple_exp MENORIGUAL simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = new NodoOperacion(exI,tipoOp.menorigual,exD);		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= simple_exp BT simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = new NodoOperacion(exI,tipoOp.mayor,exD);		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= simple_exp LT simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = new NodoOperacion(exI,tipoOp.menor,exD);		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp2 ::= exp 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = ex;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp2 ::= exp2 DIFERENTE exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = new NodoOperacion(exI,tipoOp.diferente,exD);		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp2 ::= exp2 EQ exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = new NodoOperacion(exI,tipoOp.igual,exD);		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp3 ::= exp2 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = ex;		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp3 ::= exp3 AND exp2 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = new NodoOperacion(exI,tipoOp.and,exD);		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp3 ::= exp3 OR exp2 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = new NodoOperacion(exI,tipoOp.or,exD);		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // write_stmt ::= WRITE exp3 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = new NodoEscribir(ex);		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // read_stmt ::= READ ID 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			if(variable!=null)
			{
				RESULT= new NodoLeer(variable.toString());			
			}else
			{
				RESULT = null;			
			} 		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // assign_stmt ::= ID ASSIGN exp3 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			if(variable!=null)
			{
				RESULT = new NodoAsignacion(variable.toString(),ex);							
			}else
			{
				RESULT = null;			
			}		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // repeat_stmt ::= REPEAT stmt_seq UNTIL exp3 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = new NodoRepeat(exI,exD);		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("repeat_stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // if_stmt ::= IF exp2 THEN stmt_seq ELSE stmt_seq END 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pthenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pthenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase pthen = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pelseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pelseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase pelse = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			RESULT = new NodoIf(ex,pthen,pelse);		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // if_stmt ::= IF exp2 THEN stmt_seq END 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pthenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pthenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase pthen = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			RESULT = new NodoIf(ex,pthen);		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // for_stmt ::= FOR LPAREN assign_stmt SEMI exp SEMI assign_stmt RPAREN stmt_seq END 
            {
              NodoBase RESULT =null;
		int pasigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pasigright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		NodoBase pasig = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int pcomprobleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pcomprobright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoBase pcomprob = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ppasoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ppasoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase ppaso = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pcuerpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pcuerporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase pcuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			RESULT = new NodoFor(pasig,pcomprob,ppaso,pcuerpo);		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // param_list2 ::= 
            {
              NodoBase RESULT =null;
		
			RESULT = null;		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list2",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // param_list2 ::= exp 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = ex;		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list2",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // param_list2 ::= param_list2 COLON exp 
            {
              NodoBase RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase ini = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
			NodoBase hijoActual = ini;
			if(hijoActual!=null)
			{
				while(hijoActual.TieneHermano())
				{
					hijoActual = hijoActual.getHermanoDerecha();
				}
				hijoActual.setHermanoDerecha(ex);
				RESULT=ini;
			}else
			{
				RESULT=ex;
			}		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list2",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // param_list ::= 
            {
              NodoBase RESULT =null;
		
			RESULT = null;		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // param_list ::= INT ID 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			if(variable!=null)
			{
				RESULT= new NodoIdentificador(variable.toString());			
			}else
			{
				RESULT = null;		
			}		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // param_list ::= param_list COLON INT ID 
            {
              NodoBase RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase ini = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
			NodoBase hijoActual = ini;
			if(hijoActual!=null)
			{
				while(hijoActual.TieneHermano())
				{
					hijoActual = hijoActual.getHermanoDerecha();
				}
				
				hijoActual.setHermanoDerecha( new NodoIdentificador( variable.toString() ) );
				RESULT=ini;
			}else
			{
				RESULT = new NodoIdentificador(variable.toString());
			}		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // body ::= BEGIN stmt_seq END 
            {
              NodoBase RESULT =null;
		int pbodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pbodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase pbody = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			RESULT = pbody;		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("body",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // procedure_stmt ::= tipo ID LPAREN param_list2 RPAREN body 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int inileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase ini = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pbodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pbodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase pbody = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = new NodoProcedimiento(variable,ini,pbody);		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // call_stmt ::= ID EQ ID LPAREN param_list RPAREN 
            {
              NodoBase RESULT =null;
		int variable1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int variable1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String variable1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int variable2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int variable2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String variable2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int inileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ini = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			if(variable1!=null && variable1!=null)
			{
				RESULT = new NodoLLamada(variable1,variable2,ini);		
			}else
			{
				RESULT = null;		
			}		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // call_stmt ::= ID LPAREN param_list RPAREN 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int inileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ini = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			if(variable!=null)
			{
				RESULT = new NodoLLamada(variable,ini);		
			}else
			{
				RESULT = null;		
			}		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stmt ::= error 
            {
              NodoBase RESULT =null;
		
			RESULT = null;		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmt ::= RETURN FALSE 
            {
              NodoBase RESULT =null;
		
			RESULT = new NodoBoolean(false);		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmt ::= RETURN TRUE 
            {
              NodoBase RESULT =null;
		
			RESULT = new NodoBoolean(true);		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt ::= RETURN simple_exp 
            {
              NodoBase RESULT =null;
		int sexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sexp = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT =  sexp;				
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= call_stmt 
            {
              NodoBase RESULT =null;
		int scallleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scallright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase scall = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = scall;		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt ::= procedure_stmt 
            {
              NodoBase RESULT =null;
		int sprocleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sprocright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sproc = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = sproc;		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt ::= for_stmt 
            {
              NodoBase RESULT =null;
		int sforleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sforright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sfor = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = sfor;		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt ::= write_stmt 
            {
              NodoBase RESULT =null;
		int sescleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sescright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sesc = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = sesc;		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt ::= read_stmt 
            {
              NodoBase RESULT =null;
		int slecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slecright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase slec = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = slec;		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt ::= assign_stmt 
            {
              NodoBase RESULT =null;
		int sasileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sasiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sasi = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = sasi;		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= repeat_stmt 
            {
              NodoBase RESULT =null;
		int srepleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int srepright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase srep = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = srep;		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= if_stmt 
            {
              NodoBase RESULT =null;
		int sifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sifright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sif = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = sif;		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt_seq ::= 
            {
              NodoBase RESULT =null;
		
			RESULT = null;		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_seq",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt_seq ::= stmt 
            {
              NodoBase RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sent = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = sent;		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_seq",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt_seq ::= stmt_seq SEMI stmt 
            {
              NodoBase RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase ini = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sent = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			NodoBase hijoActual = ini;
			if(hijoActual!=null)
			{
				while(hijoActual.TieneHermano())
				{
					hijoActual = hijoActual.getHermanoDerecha();
				}
				hijoActual.setHermanoDerecha(sent);
				RESULT=ini;
			}else
			{
				RESULT=sent;
			}		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_seq",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // function_stmt ::= tipo ID LPAREN param_list RPAREN body 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int inileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase ini = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pbodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pbodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase pbody = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = new NodoFuncion(variable,ini,pbody);		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // function_list ::= 
            {
              NodoBase RESULT =null;
		
			RESULT = null;		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // function_list ::= function_stmt 
            {
              NodoBase RESULT =null;
		int festleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int festright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase fest = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = fest;					
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // function_list ::= function_list function_stmt 
            {
              NodoBase RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ini = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int festleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int festright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase fest = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			NodoBase hijoActual = ini;
			if(hijoActual!=null)
			{
				while(hijoActual.TieneHermano())
				{
					hijoActual = hijoActual.getHermanoDerecha();
				}
				hijoActual.setHermanoDerecha(fest);
				RESULT=ini;
			}else
			{
				RESULT=fest;
			}		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= function_list body 
            {
              Object RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ini = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pbodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pbodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase pbody = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
				
			NodoBase hijoActual = ini;
						
			if(hijoActual!=null)
			{
				while(hijoActual.TieneHermano())
				{
					hijoActual = hijoActual.getHermanoDerecha();
				} 
				hijoActual.setHermanoDerecha(pbody);
				ast = ini;
			}else
			{
				ast = pbody;
			}					
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

